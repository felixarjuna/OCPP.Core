// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OCPP.Core.WebApi.Persistence;

#nullable disable

namespace OCPP.Core.WebApi.Migrations
{
    [DbContext(typeof(OCPPCoreDbContext))]
    [Migration("20240314080315_UpdateChargeStationSchema")]
    partial class UpdateChargeStationSchema
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.9");

            modelBuilder.Entity("OCPP.Core.Domain.Entities.ChargeStation", b =>
                {
                    b.Property<string>("StationId")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("ChargeBoxSerialNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ChargePointSerialNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ClientCertThumb")
                        .HasColumnType("TEXT");

                    b.Property<string>("FirmwareVersion")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("MeterSerialNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("MeterType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Modem")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Online")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Password")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Protocol")
                        .HasColumnType("TEXT");

                    b.Property<string>("StationName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Username")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("VendorName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("StationId");

                    b.HasIndex(new[] { "StationId" }, "ChargeStation_Identifier")
                        .IsUnique();

                    b.ToTable("ChargeStations");
                });

            modelBuilder.Entity("OCPP.Core.Domain.Entities.ChargeTag", b =>
                {
                    b.Property<string>("TagId")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<bool?>("Blocked")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("ParentTagId")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("TagName")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.HasKey("TagId")
                        .HasName("PK_ChargeKeys");

                    b.ToTable("ChargeTags");
                });

            modelBuilder.Entity("OCPP.Core.Domain.Entities.Connector", b =>
                {
                    b.Property<int>("ConnectorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double?>("ChargeRateKW")
                        .HasColumnType("REAL");

                    b.Property<string>("ConnectorName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<double?>("LastMeter")
                        .HasColumnType("REAL");

                    b.Property<DateTime?>("LastMeterTime")
                        .HasColumnType("TEXT");

                    b.Property<double?>("LastStatus")
                        .HasColumnType("REAL");

                    b.Property<DateTime?>("LastStatusTime")
                        .HasColumnType("TEXT");

                    b.Property<double?>("MeterKWH")
                        .HasColumnType("REAL");

                    b.Property<double?>("SoC")
                        .HasColumnType("REAL");

                    b.Property<int>("StationId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("StationId1")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.HasKey("ConnectorId");

                    b.HasIndex("StationId1");

                    b.ToTable("ConnectorStatuses");
                });

            modelBuilder.Entity("OCPP.Core.Domain.Entities.MessageLog", b =>
                {
                    b.Property<int>("LogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ChargePointId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int?>("ConnectorId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ErrorCode")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("LogTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Result")
                        .HasColumnType("TEXT");

                    b.HasKey("LogId");

                    b.HasIndex(new[] { "LogTime" }, "IX_MessageLog_ChargePointId");

                    b.ToTable("MessageLog", (string)null);
                });

            modelBuilder.Entity("OCPP.Core.Domain.Entities.Transaction", b =>
                {
                    b.Property<int>("TransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ConnectorId")
                        .HasMaxLength(100)
                        .HasColumnType("INTEGER");

                    b.Property<double>("MeterStart")
                        .HasColumnType("REAL");

                    b.Property<double?>("MeterStop")
                        .HasColumnType("REAL");

                    b.Property<string>("StartResult")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("StartTagId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("StopReason")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("StopTagId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("StopTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Uid")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("TransactionId");

                    b.HasIndex("ConnectorId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("OCPP.Core.Domain.Entities.Connector", b =>
                {
                    b.HasOne("OCPP.Core.Domain.Entities.ChargeStation", "Station")
                        .WithMany("Connectors")
                        .HasForeignKey("StationId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Station");
                });

            modelBuilder.Entity("OCPP.Core.Domain.Entities.Transaction", b =>
                {
                    b.HasOne("OCPP.Core.Domain.Entities.Connector", "Connector")
                        .WithMany("Transactions")
                        .HasForeignKey("ConnectorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Connector");
                });

            modelBuilder.Entity("OCPP.Core.Domain.Entities.ChargeStation", b =>
                {
                    b.Navigation("Connectors");
                });

            modelBuilder.Entity("OCPP.Core.Domain.Entities.Connector", b =>
                {
                    b.Navigation("Transactions");
                });
#pragma warning restore 612, 618
        }
    }
}
